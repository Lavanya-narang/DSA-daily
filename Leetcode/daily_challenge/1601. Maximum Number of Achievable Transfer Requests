// class Solution {
// public:
//     int ans = 0;

//     void helper(int start, vector<vector<int>>& requests, vector<int>& indegree, int n, int count) {
//         if (start == requests.size()) {
//             for (int i = 0; i < n; i++) {
//                 if (indegree[i] != 0) {
//                     return;
//                 }
//             }
//             ans = max(ans, count);
//             return;
//         }

//         // Take 
//         indegree[requests[start][0]]--;
//         indegree[requests[start][1]]++;
//         helper(start + 1,requests, indegree, n, count + 1);

//         // Not-take
//         indegree[requests[start][0]]++;
//         indegree[requests[start][1]]--;
//         helper(start + 1,requests, indegree, n, count);
//     }
    
//     int maximumRequests(int n, vector<vector<int>>& requests) {
//         vector<int> indegree(n, 0);
//         helper(0, requests, indegree, n, 0);
//         return ans;
//     }
// };



class Solution {
public:

int ans  = 0 ; 
    void fun(int ind,int count,vector<int>&vec,vector<vector<int>>& req){
        //base case
        if(ind==req.size()){
            for(auto it:vec){
                if(it!=0) return;
            }
            ans  = max(ans,count);
            return;
        }
      
       fun(ind+1,count,vec,req);
        int u = req[ind][0];
        int v =  req[ind][1];
        vec[u]--;vec[v]++;
       fun(ind+1,count+1,vec,req);
        vec[u]++;vec[v]--;
        
        


    }
    int maximumRequests(int n, vector<vector<int>>& req) {
        vector<int>vec(n,0);
         fun(0,0,vec,req);
        return ans;
    }
};
